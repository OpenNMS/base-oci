---
version: 2.1

aliases:
  - &setup_dct_env
    name: Setup DCT environment
    command: |
      echo "export DOCKER_REGISTRY=${DOCKER_REGISTRY}" >> $BASH_ENV
      echo "export DOCKER_ORG=${DOCKER_ORG}" >> $BASH_ENV
      echo "export DOCKER_CONTENT_TRUST=1" >> $BASH_ENV
      echo "export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=\"$DCT_DELEGATE_KEY_PASSPHRASE\"" >> $BASH_ENV
      echo "export CONTAINER_REGISTRY_LOGIN=${DOCKERHUB_LOGIN}"
      echo "export CONTAINER_REGISTRY_PASS=${DOCKERHUB_PASS}"
      echo "export IMAGE=${DOCKER_REGISTRY}/${DOCKER_ORG}/deploy-base" >> $BASH_ENV
      echo "export VERSION=jre-2.0.0.b<< pipeline.number >>" >> $BASH_ENV
    environment:
      DOCKER_REGISTRY: docker.io
      DOCKER_ORG: opennms

  - &load_dct_keys
    name: Load signer key
    command: |
      KEY_FOLDER=~/.docker/trust/private
      mkdir -p $KEY_FOLDER
      echo "$DCT_DELEGATE_KEY" | base64 -d > $KEY_FOLDER/$DCT_DELEGATE_KEY_NAME.key
      echo "done first decoding"
      echo "$DCT_REPO_DEPLOY_BASE_KEY" | base64 -d > $KEY_FOLDER/$DCT_REPO_DEPLOY_BASE_KEY_NAME.key
      chmod 600 $KEY_FOLDER/*
      docker trust key load $KEY_FOLDER/$DCT_DELEGATE_KEY_NAME.key

jobs:
  local-oci-build:
    parameters:
      architecture:
        type: string
    machine:
      image: cimg/base:2022.08
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - checkout
      - run:
          name: multiarch/qemu-user-static
          command: DOCKER_CONTENT_TRUST=0 docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - run:
          name: Single-arch build
          command: |
            make oci ARCHITECTURE="<< parameters.architecture >>"
      - store_artifacts:
          path: ~/project/artifacts

  publish-single-arch:
    parameters:
      architecture:
        type: string
    machine:
      image: cimg/base:2022.08
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - checkout
      - run: *setup_dct_env
      - run: *load_dct_keys
      - run:
          name: multiarch/qemu-user-static
          command: DOCKER_CONTENT_TRUST=0 docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - run:
          name: Push single-arch OCI
          command: |
            make publish ARCHITECTURE="<< parameters.architecture >>" \
              CONTAINER_REGISTRY="${DOCKER_REGISTRY}" \
              TAG_ORG="${DOCKER_ORG}" \
              CONTAINER_REGISTRY_LOGIN="${DOCKERHUB_LOGIN}" \
              CONTAINER_REGISTRY_PASS="${DOCKERHUB_PASS}" \
              VERSION=${VERSION}

  publish-multi-arch:
    machine:
      image: cimg/base:2022.08
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      - checkout
      - run: *setup_dct_env
      - run: *load_dct_keys
      - run:
          name: Login to DockerHub
          command: |
            docker login -u ${DOCKERHUB_LOGIN} -p ${DOCKERHUB_PASS}
      - run:
          name: Install notary
          command: |
            sudo wget https://github.com/theupdateframework/notary/releases/download/v0.6.1/notary-Linux-amd64 -O /usr/local/bin/notary
            sudo chmod a+x /usr/local/bin/notary

      # docker buildx does not support signing multi-arch images
      # cf. - https://github.com/docker/buildx/issues/313
      #     - https://github.com/sudo-bot/action-docker-sign#sign-multi-platform-manifests
      #
      # -> Sign the images for each architecture separately
      # -> Create a manifest for the multi-arch image and push it
      # -> Use notary to sign the manifest (this needs the targets key of the deploy-base repository)
      - run:
          name: Create & push multi-arch manifest
          command: |
            IMAGE_REF="${IMAGE}:${VERSION}"
            docker manifest create ${IMAGE_REF} \
              ${IMAGE_REF}-amd64 \
              ${IMAGE_REF}-arm64 \
              ${IMAGE_REF}-arm-v7 \
              --amend
            SHA_256="$(docker manifest push "${IMAGE_REF}" --purge | cut -d ':' -f 2)"
            echo "Manifest SHA-256: ${SHA_256}"
            echo "Image-Ref: ${IMAGE_REF}"
            MANIFEST_FROM_REG="$(docker manifest inspect "${IMAGE_REF}" -v)";
            BYTES_SIZE="$(printf "${MANIFEST_FROM_REG}" | jq -r '.[].Descriptor.size' | uniq)";
            echo "Manifest-inspect BYTES: ${BYTES_SIZE}";
            echo "Manifest contents:\n";
            printf "${MANIFEST_FROM_REG}" | jq -r '.[].Descriptor | "Architecture: " + .platform.architecture + .platform.variant + ", digest: " + .digest';
            export NOTARY_AUTH="$(printf "${DOCKERHUB_LOGIN}:${DOCKERHUB_PASS}" | base64 -w0)"
            echo "Sign ${SHA_256} with the notary"
            # when the multi-arch image is signed by the delegate key then docker pull reports "No valid trust data..."
            # -> the following lines can not be used:
            #
            # export NOTARY_DELEGATION_PASSPHRASE="${DCT_DELEGATE_KEY_PASSPHRASE}"
            # notary -d ~/.docker/trust/ -s https://notary.docker.io addhash "${IMAGE}" "${VERSION}" 946 --sha256 "${SHA_256}" --roles targets/opennms-circle-delegate --publish --verbose
            #
            # -> use the targets key of the deploy-base repository to sign the multi-arch image instead
            export NOTARY_TARGETS_PASSPHRASE="${DCT_REPO_DEPLOY_BASE_KEY_PASSPHRASE}"
            notary -d ~/.docker/trust/ -s https://notary.docker.io addhash "${IMAGE}" "${VERSION}" "${BYTES_SIZE}" --sha256 "${SHA_256}" --publish --verbose
            echo "Done!"
            # notary -s https://notary.docker.io list "${IMAGE}"

workflows:
  version: 2
  main:
    jobs:
      - local-oci-build:
          matrix:
            parameters:
              architecture: [linux/amd64,linux/arm64,linux/arm/v7]
          filters:
            branches:
              ignore: master
      - publish-single-arch:
          matrix:
            parameters:
              architecture: [linux/amd64,linux/arm64,linux/arm/v7]
          context: "docker-content-trust"
          filters:
            branches:
              only: master
      - publish-multi-arch:
          context: "docker-content-trust"
          requires:
            - publish-single-arch
          filters:
            branches:
              only: master
